gcc -c -o shell.o shell.c -I. -g -Wall --std=gnu11 -fpic
gcc -o shell shell.o 
=== Command runs in a separate process (01d) ===================================
Command(s) run:
/usr/bin/ps

shell>     PID TTY          TIME CMD
 526735 pts/1    00:00:01 bash
 530154 pts/1    00:00:00 repo.sh
 530167 pts/1    00:00:00 test.sh
 530208 pts/1    00:00:00 01d.sh
 530212 pts/1    00:00:00 shell
 530213 pts/1    00:00:00 tee
 530214 pts/1    00:00:00 ps
shell> 
=== PASS (3/3) =================================================================

=== Foreground command without arguments correctly executed (01b) ==============
Command(s) run:
/usr/bin/date

shell> Sun Dec 11 05:36:44 EST 2022
shell> 
=== PASS (3/3) =================================================================

=== Foreground command with arguments correctly executed (01c) =================
Command(s) run:
/usr/bin/date --version

shell> date (GNU coreutils) 8.32
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by David MacKenzie.
shell> 
=== PASS (3/3) =================================================================

=== Waits for foreground command to complete (01e) =============================
Command(s) run:
/bin/sleep 5

spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 5
=== PASS (3/3) =================================================================

=== Waits for current foreground command (01h) =================================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 2 &
shell> /bin/sleep 5
=== PASS (2/2) =================================================================

=== Background command without arguments correctly executed (02h) ==============
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /usr/bin/ps &
shell>     PID TTY          TIME CMD
 530333 pts/2    00:00:00 shell
=== PASS (3/3) =================================================================

=== Background command with arguments correctly executed (02a) =================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 9 &
shell> === PASS (3/3) =================================================================

=== Accepts commands immediately after background command (02b) ================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 8 &
shell> /usr/bin/ps
    PID TTY          TIME CMD
 530384 pts/2    00:00:00 shell
=== PASS (3/3) =================================================================

=== Non-existent command results in error message (01f) ========================
Command(s) run:
/bin/invalid

shell> execv failed: No such file or directory
shell> shell> 
=== PASS (2/2) =================================================================

=== Child process is terminated when execv fails (01g) =========================
Command(s) run:
/bin/invalid
/usr/bin/ps

shell> execv failed: No such file or directory
shell>     PID TTY          TIME CMD
 526735 pts/1    00:00:01 bash
 530154 pts/1    00:00:00 repo.sh
 530167 pts/1    00:00:00 test.sh
 530424 pts/1    00:00:00 01g.sh
 530428 pts/1    00:00:00 shell
 530429 pts/1    00:00:00 tee
 530430 pts/1    00:00:00 shell
 530431 pts/1    00:00:00 ps
shell> shell>     PID TTY          TIME CMD
 526735 pts/1    00:00:01 bash
 530154 pts/1    00:00:00 repo.sh
 530167 pts/1    00:00:00 test.sh
 530424 pts/1    00:00:00 01g.sh
 530428 pts/1    00:00:00 shell
 530429 pts/1    00:00:00 tee
 530432 pts/1    00:00:00 ps
shell> 
=== MISS (0/2) =================================================================

=== exit terminates the shell (01a) ============================================
Command(s) run: exit
shell> 
=== PASS (3/3) =================================================================

=== fg waits for background process (02c) ======================================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 5 &
shell> fg
=== PASS (3/3) =================================================================

=== fg only waits for background process (02d) =================================
spawn /home/student/current-semester/projects/shell/grading/tests/../repo/shell
shell> /bin/sleep 5 &
shell> /usr/bin/ps
    PID TTY          TIME CMD
 530535 pts/2    00:00:00 shell
 530539 pts/2    00:00:00 sleep
 530540 pts/2    00:00:00 ps
shell> fg
=== PASS (2/2) =================================================================

=== Return values for system calls are checked (03a) ===========================
fork(
--
    int pid = fork();

    //populate the args array with everything before NULL or the ampersand
    char *args[i+1];
    for(int j = 0; j < i; j++){
---------------------------
execv(
--
        if(execv(args[0], args) < 0){
            perror("execv failed");
        }
    }
    else{
---------------------------
waitpid(
--
    waitpid(recent_pid, NULL, 0); 
}

void nonBuiltIn(char **command, int background[], int* num_elements){
    //find the index of either the NULL or the ampersand
--
            waitpid(pid, NULL, 0);
        }
        else{
            //store the PID of the child in the array of PIDs
            background[*num_elements] = pid;
---------------------------
=== MANUAL (?/2) ===============================================================

=== Compiles without warnings (03b) ============================================
=== PASS (3/3) =================================================================

=== Multiple functions (03i) ===================================================
3 helper functions
=== PASS (2/2) =================================================================

=== No memory errors (03c) =====================================================
==530654== Memcheck, a memory error detector
==530654== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==530654== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==530654== Command: /home/student/current-semester/projects/shell/grading/tests/../repo/shell
==530654== 
shell>     PID TTY          TIME CMD
 526735 pts/1    00:00:01 bash
 530154 pts/1    00:00:00 repo.sh
 530167 pts/1    00:00:00 test.sh
 530651 pts/1    00:00:00 03c.sh
 530654 pts/1    00:00:02 memcheck-arm64-
 530655 pts/1    00:00:00 tee
 530656 pts/1    00:00:00 grep
 530657 pts/1    00:00:00 03c.sh
 530658 pts/1    00:00:00 cat
 530659 pts/1    00:00:00 ps
shell> shell> shell> ==530654== 
==530654== HEAP SUMMARY:
==530654==     in use at exit: 0 bytes in 0 blocks
==530654==   total heap usage: 20 allocs, 20 frees, 8,373 bytes allocated
==530654== 
==530654== For a detailed leak analysis, rerun with: --leak-check=full
==530654== 
==530654== For lists of detected and suppressed errors, rerun with: -s
==530654== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==530654== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=== PASS (2/2) =================================================================

=== No memory leaks (03d) ======================================================
==530676== Memcheck, a memory error detector
==530676== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==530676== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==530676== Command: /home/student/current-semester/projects/shell/grading/tests/../repo/shell
==530676== 
shell>     PID TTY          TIME CMD
 526735 pts/1    00:00:01 bash
 530154 pts/1    00:00:00 repo.sh
 530167 pts/1    00:00:00 test.sh
 530673 pts/1    00:00:00 03d.sh
 530676 pts/1    00:00:02 memcheck-arm64-
 530677 pts/1    00:00:00 tee
 530678 pts/1    00:00:00 grep
 530679 pts/1    00:00:00 03d.sh
 530680 pts/1    00:00:00 cat
 530681 pts/1    00:00:00 ps
shell> shell> shell> ==530676== 
==530676== HEAP SUMMARY:
==530676==     in use at exit: 0 bytes in 0 blocks
==530676==   total heap usage: 20 allocs, 20 frees, 8,373 bytes allocated
==530676== 
==530676== All heap blocks were freed -- no leaks are possible
==530676== 
==530676== For lists of detected and suppressed errors, rerun with: -s
==530676== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==530676== All heap blocks were freed -- no leaks are possible
=== PASS (2/2) =================================================================

=== Comments (03e) =============================================================
shell.c
+    //free all memory before exiting
+    //obtain the pid of the most recent background process
+    //make the parent wait for that process to finish
+    //find the index of either the NULL or the ampersand
+    //the last character will either be NULL or the ampersand
+    //populate the args array with everything before NULL or the ampersand
+    //NULL will always be the last element of the array
+   //if the fork failed, print an error message
+    //if the child process is running, execute the file contained in args but print an error message if this is file does not exist
+        //only make the parent wait if there is no ampersand (foreground process)     
+            //store the PID of the child in the array of PIDs
+    //initialize an array that can hold all the background processes
+    //keep a tracker of the current number of elements in the arry
+             //run exit if the first command line argument is exit
+            //run fg if the first command line argument is fg
+            //call the non-built in function if it's anything else
=== MANUAL (?/2) ===============================================================

=== Multiple git commits (03f) =================================================
5 commits
=== PASS (2/2) =================================================================

